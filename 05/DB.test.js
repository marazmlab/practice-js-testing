import DB from './DB';

describe('DB', () => {
    let db;

    beforeEach(() => {
        db = new DB();
    });

    //użyłem wszędzie toEqual mimo, że tylko w pierwszym wypadku nie przechodził.

    describe('insert', () => {

        it('should insert data with autogenerated id', async() => {
            const data = {a: 1, b: 2};
            const result = await db.insert(data); 
            expect(result).toEqual({id: 1, a: 1, b: 2});
        });

        it('should throw error if id is duplicated', async() => {
            const data1 = { id: 1, a: 1, b: 2};
            const data2 = { id: 1, a: 3, b: 4};
            await db.insert(data1);
            await expect(db.insert(data2)).rejects.toEqual('ID can\'t be duplicated!');
        });

        it('should throw error if id is not a number', async () => {
            const data = { id: 'abc', a: 1, b: 2 }; 
            await expect(db.insert(data)).rejects.toEqual('ID can be only number!'); 
        });

    });

    describe('select', () => {

        it('should select data by id', async () => {
            const data = { id: 1, a: 1, b: 2 };
            await db.insert(data); 
            const result = await db.select(1); 
            expect(result).toEqual(data); 
        });

        it('should throw error if id not found', async () => {
            await expect(db.select(1)).rejects.toEqual('ID not found');
        });

    });

    describe('remove', () => {
        
        it('should remove data by id', async () => {
            const data = { id: 1, a: 1, b: 2 };
            await db.insert(data);
            const result = await db.remove(1);
            expect(result).toEqual('Item was remove!');
        });

        it('should throw error if item not exist', async () => {
            await expect(db.remove(1)).rejects.toEqual('Item not exist!');
        });

    });

    describe('update', () => {

        it('should update data by id', async () => {
            const data = { id: 1, a: 1, b: 2 };
            await db.insert(data);
            const updatedData = { id: 1, a: 3, b: 4 };
            const result = await db.update(updatedData);
            expect(result).toEqual(updatedData);
        });

        it('should throw error if id is not provided', async () => {
            const data = { a: 1, b: 2 };
            await expect(db.update(data)).rejects.toEqual('ID have to be set!');
        });

        it('should throw error if id not found', async () => {
            const data = { id: 1, a: 1, b: 2 };
            await expect(db.update(data)).rejects.toEqual('ID not found!'); 
        });
    });

    describe('truncate', () => {
    
        it('should remove all data', async () => {
            await db.insert({ id: 1, a: 1, b: 2 });
            await db.insert({ id: 2, a: 3, b: 4 });
            await db.truncate();
            const rows = await db.getRows();
            expect(rows).toEqual([]);
        });
        //nie wiem jakie jeszcze testy tu można wymyślić
    });

    describe('getRows', () => {

        it('should return all rows', async () => {
            const data1 = { id: 1, a: 1, b: 2 };
            const data2 = { id: 2, a: 3, b: 4 };
            await db.insert(data1);
            await db.insert(data2);
            const rows = await db.getRows();
            expect(rows).toEqual([data1, data2]);
        });
        //tu tak samo
    });


});